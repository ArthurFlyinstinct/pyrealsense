import sys

from numpy.ctypeslib import ndpointer
import ctypes


# type definition

class rs_error(ctypes.Structure):
    _fields_ = [("message", ctypes.c_char_p),
                ("function", ctypes.c_char_p),
                ("args", ctypes.c_char_p),
                ]


## parse that on build
RS_API_MAJOR_VERSION = 1
RS_API_MINOR_VERSION = 9
RS_API_PATCH_VERSION = 7
RS_API_VERSION = (
    ((RS_API_MAJOR_VERSION) * 10000) + ((RS_API_MINOR_VERSION) * 100) + (RS_API_PATCH_VERSION))


class rs_stream:
    RS_STREAM_DEPTH         = 0  # Native stream of depth data produced by RealSense device
    RS_STREAM_COLOR         = 1  # Native stream of color data captured by RealSense device
    RS_STREAM_INFRARED      = 2  # Native stream of infrared data captured by RealSense device
    RS_STREAM_INFRARED2     = 3  # Native stream of infrared data captured from a second viewpoint by RealSense device
    # RS_STREAM_FISHEYE                          ,
    # RS_STREAM_POINTS                           , /**< Synthetic stream containing point cloud data generated by deprojecting the depth image */
    # RS_STREAM_RECTIFIED_COLOR                  , /**< Synthetic stream containing undistorted color data with no extrinsic rotation from the depth stream */
    # RS_STREAM_COLOR_ALIGNED_TO_DEPTH           , /**< Synthetic stream containing color data but sharing intrinsic of depth stream */
    # RS_STREAM_INFRARED2_ALIGNED_TO_DEPTH       , /**< Synthetic stream containing second viewpoint infrared data but sharing intrinsic of depth stream */
    # RS_STREAM_DEPTH_ALIGNED_TO_COLOR           , /**< Synthetic stream containing depth data but sharing intrinsic of color stream */
    # RS_STREAM_DEPTH_ALIGNED_TO_RECTIFIED_COLOR ,  /**< Synthetic stream containing depth data but sharing intrinsic of rectified color stream */
    # RS_STREAM_DEPTH_ALIGNED_TO_INFRARED2       , /**< Synthetic stream containing depth data but sharing intrinsic of second viewpoint infrared stream */
    # RS_STREAM_COUNT



## import C lib
lrs = ctypes.CDLL('librealsense.so')


## ERROR handling
e = ctypes.POINTER(rs_error)()

def _check_error():
    global e
    try:
        # TODO: currently problem with function argument of error, which SEGFAULT when accessed
        print("rs_error was raised with message: " + e.contents.message)
        sys.exit(0)
    except ValueError:
        # no error
        pass


## make this a class that saves all the parameters on startup
dev = 0
ctx = 0

def start():
    """Start a device with default parameters.
    """
    global ctx, dev

    ctx = lrs.rs_create_context(RS_API_VERSION, ctypes.byref(e))
    _check_error()

    lrs.rs_get_device_count(ctx, ctypes.byref(e))
    _check_error()

    dev = lrs.rs_get_device(ctx, 0, ctypes.byref(e))
    _check_error()

    #rs_enable_stream(dev, RS_STREAM_COLOR, c_width, c_height, RS_FORMAT_RGB8, c_fps, &e);
    lrs.rs_enable_stream(dev, rs_stream.RS_STREAM_DEPTH, 640, 480, 1, 30, ctypes.byref(e));
    _check_error();
    lrs.rs_enable_stream(dev, rs_stream.RS_STREAM_COLOR, 640, 480, 5, 30, ctypes.byref(e));
    _check_error();

    lrs.rs_start_device(dev, ctypes.byref(e))


def stop():
    """Stop a device and delete the contexte
    """
    global ctx, dev

    lrs.rs_stop_device(dev, ctypes.byref(e));
    lrs.rs_delete_context(ctx, ctypes.byref(e));


def get_colour():
    """Return the color stream
    """
    global dev

    lrs.rs_wait_for_frames(dev, ctypes.byref(e))
    lrs.rs_get_frame_data.restype = ndpointer(dtype=ctypes.c_uint8, shape=(480,640,3))
    return lrs.rs_get_frame_data(dev, rs_stream.RS_STREAM_COLOR, ctypes.byref(e))

def get_depth():
    """Return the depth stream
    """
    global dev

    lrs.rs_wait_for_frames(dev, ctypes.byref(e))
    lrs.rs_get_frame_data.restype = ndpointer(dtype=ctypes.c_uint16, shape=(480,640))
    return lrs.rs_get_frame_data(dev, rs_stream.RS_STREAM_DEPTH, ctypes.byref(e))
